server:
  port: 9090
spring:
  application:
    name: authorization
  sql:
    init:
      schema-locations:
        - classpath:sql/drop-oauth2-registered-client-schema.sql
        - classpath:org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql
        - classpath:sql/drop-oauth2-authorization-consent-schema.sql
        - classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql
        - classpath:sql/drop-oauth2-authorization-schema.sql
        - classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql
        - classpath:org/springframework/session/jdbc/schema-drop-mysql.sql
        - classpath:org/springframework/session/jdbc/schema-mysql.sql
      data-locations:
        - classpath:sql/data.sql
        - classpath:sql/data-oauth2-registered-client.sql
      mode: always
  docker:
    compose:
      profiles:
        active: "oauth2_server"
      file: authorization/compose.yaml

#  security:
#    oauth2:
#      authorizationserver:
#        client:
#          meet:
#            registration:
#              client-id: kcsurapaneni
#              client-secret: "{bcrypt}$2a$12$FSqte2Xlpn1B3C1wldykTuPzVFsvMgfroMaKlR.dJesbEdykhi0ia"   #password
#              client-authentication-methods:
#                - client_secret_basic
#              authorization-grant-types:
#                - client_credentials
#                - authorization_code
#                - refresh_token
#              scopes:
#                - admin
#                - openid
#              redirect-uris:
#                - http://127.0.0.1:8082/login/oauth2/code/hello
#            require-authorization-consent: true
#            token:
#              access-token-time-to-live: 5s
#          greet:
#            registration:
#              client-id: ganesh
#              client-secret: "{bcrypt}$2a$12$mckf2mnaSXYo0SVASmjul.Zv4fEfLpOXbXtIL.N2PpuhCA1nlRQSK"   #secret
#              client-authentication-methods:
#                - client_secret_basic
#              authorization-grant-types:
#                - client_credentials
#              scopes:
#                - read
#                - write
#            token:
#              access-token-time-to-live: 1m
#        endpoint:
#          authorization-uri:

## public & private key configuration

jwt:
  key:
    id: init
    public: classpath:keys/public.pem
    private: classpath:keys/key.pem

logging:
  level:
    org.springframework.security: trace
