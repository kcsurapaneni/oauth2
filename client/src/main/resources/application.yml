server:
  port: 8080
spring:
  application:
    name: client
  sql:
    init:
      schema-locations:
        - classpath:sql/drop-oauth2-registered-client-schema.sql
        - classpath:sql/oauth2-registered-client-schema.sql
        - classpath:sql/drop-oauth2-authorized-client-schema.sql
        - classpath:sql/oauth2-authorized-client-schema.sql
      data-locations: classpath:sql/data-oauth2-registered-client.sql
      mode: always
#  security:
#    oauth2:
#      client:
#        registration:
#          spotify:
#            provider: spotify
#            client-id: spotify
#            client-secret: password
#            client-name: "Spotify"
#            authorization-grant-type: authorization_code
#            client-authentication-method: client_secret_post
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope:
#              - openid
#              - admin
#          slack:
#            provider: slack
#            client-id: slack
#            client-secret: secret
#            client-name: "Slack"
#            authorization-grant-type: authorization_code
#            client-authentication-method: client_secret_basic
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope:
#              - openid
#              - admin
#        provider:
#          spotify:
#            issuer-uri: http://localhost:9090
#          slack:
#            issuer-uri: http://localhost:9090
  docker:
    compose:
      profiles:
        active: "oauth2_client"
      file: client/compose.yaml

logging:
  level:
    org.springframework.security: trace
